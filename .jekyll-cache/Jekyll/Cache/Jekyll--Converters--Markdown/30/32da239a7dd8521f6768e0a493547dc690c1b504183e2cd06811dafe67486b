I"Ê<p>Often we find ourselves in a situation where we need to check whether an object belongs to a particular class or not. For example, consider there is a UIView, and there are many subviews like UITextView, UILabel, and UIStepper. Now you have to find the UILabel from the parent view and change its text value. So how do we do that? 
Well, there are multiple ways of doing it.</p>

<div>
    <a class="notification sponsor" href="https://winya.link/get" target="_blank">
    <img src="https://ik.imagekit.io/cfsimagecdn/Winya/winya_512_qKON5oTjw.png" />
    <div>
    <p class="sponsor-title">
        Winya: Best live streaming app
    </p>
    <p>
        Become a Streamer by starting a live stream from your iPhone/iPad to Twitch/YouTube or any live streaming service of your choice. Download the app and become a creator now!</p>
    </div>
</a>
</div>

<p><img src="/blog/assets/images/swiftbit04.png" alt="Typecasting objects" /></p>

<p>Method 1 - Using â€˜forâ€™ loop.
This method is a kind of brute force method. Usually, we all do this way.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">for</span> <span class="n">subview</span> <span class="k">in</span> <span class="k">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="n">subviews</span><span class="p">{</span>
    <span class="k">if</span> <span class="n">subview</span> <span class="k">is</span> <span class="kt">UILabel</span> <span class="p">{</span>
       <span class="c1">// Change your text here</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>We run the code, and everything works as expected. However, as a developer, we should find out more efficient methods of doing it. Letâ€™s see another way of doing it.</p>

<p>Method 2 - Using â€˜case letâ€™ in â€˜for inâ€™ loop.
Here, we are using the power of the â€˜for inâ€™ loops to find the UILabel from the subviews.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">for</span> <span class="k">case</span> <span class="k">let</span> <span class="nv">label</span> <span class="k">as</span> <span class="kt">UILabel</span> <span class="k">in</span> <span class="k">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="n">subviews</span> <span class="p">{</span>
	<span class="c1">//Change your text here</span>
<span class="p">}</span></code></pre></figure>

<p>Neat, isnâ€™t it? There is a significant reduction in the number of lines of code.</p>

<p>So, do we settle here? No. There should be more Swifty way to solve this problem. Letâ€™s see how.</p>

<p>Method 3 - Using â€˜compactMapâ€™</p>

<p>In this method, we use â€˜compactMapâ€™  to typecast a view to UILabel. I consider this method to be more swifty and descriptive.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="n">subviews</span>
  <span class="o">.</span><span class="n">compactMap</span> <span class="p">{</span> <span class="nv">$0</span> <span class="k">as</span> <span class="kt">UILabel</span> <span class="p">}</span>
  <span class="o">.</span><span class="n">forEach</span> <span class="p">{</span> 
	<span class="c1">// Change your text here</span>
 <span class="p">}</span></code></pre></figure>

<p>These are the methods I prefer to typecast objects from an array. There are many more methods too. So, what is your preferred way of typecasting objects? Tell us in the comments below. Still have any queries reach out to me directly on <a href="https://twitter.com/rizwanasifahmed">Twitter</a></p>

:ET